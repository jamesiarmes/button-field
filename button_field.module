<?php

/**
 * @file
 * Defines a field, widget and formatter for the button field type.
 */

/**
 * Implements button_field_views_api().
 */
function button_field_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'button_field') . '/includes/views',
  ); // end return
} // end button_field_views_api()

/**
 * Implements hook_menu().
 */
function button_field_menu() {
  return array(
  	'button_field/callback' => array(
      'description' => 'Callback used when a button field is clicked on',
      'page callback' => 'button_field_callback',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    ),
  ); // end return
} // end function button_field_menu()

/**
 * Callback function for ajax calls when button is clicked.
 *
 * @todo See if we can make use of Drupal's ajax commands
 */
function button_field_callback() {
  $entity = entity_load_single($_REQUEST['entity_type'], $_REQUEST['entity_id']);
  $field = field_read_field($_REQUEST['field_name']);
  rules_invoke_all('button_field_clicked', $field, $entity);

  // Check to see if we have a page to redirect to.
  $return_array = array();
  if (isset($_REQUEST['destination']) && !empty($_REQUEST['destination'])) {
    $return_array['redirect'] = urldecode($_REQUEST['destination']);
  } // end if we have a page to redirect to

  echo json_encode($return_array);
  exit;
} // end function button_field_callback()

/**
 * Implements hook_field_info().
 */
function button_field_field_info() {
  return array(
    'button_field' => array(
      'label' => t('Button'),
      'description' =>
        t('Displays a button that, when clicked, fires a rules event'),
      'default_widget' => 'button_field_html',
      'default_formatter' => 'button_field_default',
    ),
  ); // end return
} // end function button_field_field_info()

/**
 * Implements hook_field_schema().
 */
function button_field_field_schema($field) {
  return array(
    'columns' => array(
      'value' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'value' => array('value'),
    ),
  ); // end return
} // end function button_field_field_schema()

/**
 * Implements hook_field_is_empty().
 */
function button_field_field_is_empty($item, $field) {
  return TRUE;
} // end function button_field_content_is_empty()

/**
 * Implements hook_field_formatter_info().
 */
function button_field_field_formatter_info() {
  return array(
    'button_field_default' => array(
      'label' => t('Default'),
      'field types' => array('button_field'),
    ),
  ); // end return
} // end function button_field_field_formatter_info()

/**
 * Implements hook_field_formatter_view().
 */
function button_field_field_formatter_view($entity_type, $entity, $field,
  $instance, $langcode, $items, $display) {
  // Add the javascript and css files.
  $path = drupal_get_path('module', 'button_field');
  drupal_add_js($path . '/js/button_field.js');

  $delta = (isset($display['views_row_id']) ? $display['views_row_id'] : 0);
  $id = _button_field_build_id($field, 'view', $delta, $langcode);

  $ids = entity_extract_ids($entity_type, $entity);
  $entity_id = $ids[0];

  $settings[$id] = array(
    'confirmation' => $field['settings']['confirmation'],
    'entity_id' => $entity_id,
    'entity_type' => $entity_type,
    'field_name' => $field['field_name'],
  ); // end $setting[$id}
  drupal_add_js($settings, 'setting');

  $element = array('value' => array());
  switch ($instance['widget']['type']) {
    case 'button_field_html':

      $element = _button_field_widget_html($id, $field, $instance, $element);
      break;

    case 'button_field_image':

      $element = _button_field_widget_image($id, $field, $instance, $element);
      break;
  } // end switch $instance['widget']['type']

  return $element['value'];
} // end function button_field_field_formatter_view()

/**
 * Implements hook_field_widget_info().
 */
function button_field_field_widget_info() {
  return array(
    'button_field_html' => array(
      'label' => 'HTML Button',
      'field types' => array('button_field'),
    ),
    'button_field_image' => array(
      'label' => 'Image Button',
      'field types' => array('button_field'),
    ),
  ); // end return
} // end function button_field_field_widget_info()

/**
 * Implements hook_field_settings_form().
 */
function button_field_field_settings_form($field, $instance, $has_data) {
  return array(
    'confirmation' => array(
      '#type' => 'textfield',
      '#title' => t('Confirmation message'),
      '#default_value' => (isset($field['settings']['confirmation'])
        ? $field['settings']['confirmation'] : FALSE),
      '#description' => t('You may enter a confirmation message to be ' .
          'displayed to the user before running any rules. If you do not ' .
          'want the user to see a confirmation message you can leave this ' .
          'setting empty.'),
    ),
  ); // end return
} // end function button_field_field_settings_form()

/**
 * Implements hook_field_widget_settings_form().
 */
function button_field_field_widget_settings_form($field, $instance) {
  $form = array(
    'additional_classes' => array(
      '#type' => 'textfield',
      '#title' => t('Additional classes'),
      '#default_value' => (isset($instance['settings']['additional_classes'])
        ? $instance['settings']['additional_classes'] : NULL),
      '#description' => t('Optionally, specify any classes to be applied to ' .
        'the element. All button field elements will always have the ' .
        '"button_field" class. Seperate multiple classes with a space.')
    ),
    'edit_hidden' => array(
      '#type' => 'checkbox',
      '#title' => t('Hide on edit form'),
      '#default_value' => (isset($instance['settings']['edit_hidden'])
        ? $instance['settings']['edit_hidden'] : TRUE),
      '#description' => t('Whether or not this field will be rendered on ' .
        'the node edit and add forms. Note: Nodes do not get assisgned a ' .
        'node id on the add form; therefore, any Rules that require the ' .
        'node to be available on button click will not function properly.'),
    ),
  ); // end $form

  $widget_settings = array();
  $widget = $instance['widget'];
  switch ($instance['widget']['type']) {
    case 'button_field_html':

      $widget_settings['text'] = array(
      	'#type' => 'textfield',
        '#title' => t('Button Text'),
        '#default_value' => (isset($widget['settings']['text']) ? $widget['settings']['text']
          : $instance['label']),
        '#required' => TRUE,
      ); // end $widget_settings['text']
      break;

    case 'button_field_image':

      $widget_settings['image_path'] = array(
        '#type' => 'textfield',
        '#title' => t('Image path'),
        '#default_value' => (isset($widget['settings']['image_path'])
          ? $widget['settings']['image_path'] : NULL),
        '#required' => TRUE,
      ); // end $widget_settings['image_path']

      $widget_settings['alt_text'] = array(
        '#type' => 'textfield',
        '#title' => t('Alt text'),
        '#default_value' => (isset($widget['settings']['alt_text']) ? $widget['settings']['alt_text']
          : $instance['label']),
        '#required' => TRUE,
      ); // end $widget_settings['alt_text']

      $widget_settings['title_text'] = array(
        '#type' => 'textfield',
        '#title' => t('Title text'),
        '#default_value' => (isset($widget['settings']['title_text'])
          ? $widget['settings']['title_text'] : $instance['label']),
        '#required' => FALSE,
      ); // end $widget_settings['title_text']
      break;
  } // end switch $instance['widget']['type']

  return array_merge($widget_settings, $form);
} // end function button_field_field_widget_settings_form()

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hides the required and cardinality fields and removes the default value from
 * the field_ui_field_edit_form because it does not apply to this field type.
 */
function button_field_form_field_ui_field_edit_form_alter(&$form, &$form_state,
  $form_id) {
  if ($form['#field']['type'] == 'button_field') {
    // Hide the required field and set it to false.
    $form['instance']['required']['#type'] = 'hidden';
    $form['instance']['required']['#value'] = FALSE;

    // Hide the cardinality and set it to one.
    $form['field']['cardinality']['#type'] = 'hidden';
    $form['field']['cardinality']['#value'] = 1;

    // No need for a default value.
    unset($form['instance']['default_value_widget']);
  }
} // end function button_field_form_field_ui_field_edit_form_alter()

/**
 * Implements hook_field_widget_form().
 */
function button_field_field_widget_form(&$form, &$form_state, $field, $instance,
  $langcode, $items, $delta, $element) {
  // Add the javascript and css files
  $path = drupal_get_path('module', 'button_field');
  drupal_add_js($path . '/js/button_field.js');

  $id = _button_field_build_id($field, 'edit', $delta, $langcode);

  $entity_type = $element['#entity_type'];
  $entity_id = NULL;
  if (isset($form_state[$entity_type])) {
    $entity = $form_state[$entity_type];
    $ids = entity_extract_ids($entity_type, $entity);
    $entity_id = $ids[0];
  }

  $settings[$id] = array(
    'confirmation' => $field['settings']['confirmation'],
    'entity_id' => $entity_id,
    'entity_type' => $entity_type,
    'field_name' => $field['field_name'],
  ); // end $settings[$id]
  drupal_add_js($settings, 'setting');

  switch ($instance['widget']['type']) {
    case 'button_field_html':

      return ($instance['widget']['settings']['edit_hidden']
        ? array()
        : _button_field_widget_html($id, $field, $instance, $element));
      break;

    case 'button_field_image':

      return ($instance['widget']['settings']['edit_hidden']
        ? array()
        : _button_field_widget_image($id, $field, $instance, $element));
      break;
  } // end switch $instance['widget']['type']

  return $element;
} // end function button_field_field_widget_form()

/**
 * Builds the renderable array for an HTML button field widget.
 *
 * @param $id
 *   Id for the field element
 * @param $field
 * @param $instance
 * @param $element
 */
function _button_field_widget_html($id, $field, $instance, $element) {
  $class = array('button_field');
  if (isset($instance['additional_class'])) {
    $class = array_merge($classes, explode(' ', $instance['additional_class']));
  }

  $element['value'] = array(
    '#type' => 'button',
    '#id' => $id,
    '#name' => $id,
    '#attributes' => array('class' => $class),
    '#value' => (isset($instance['widget']['settings']['text'])
      ? $instance['widget']['settings']['text'] : $instance['label']),
    // Button elements do not obey the #description index, so we need to add
    // our own suffix here.
    '#suffix' => '<div class="description">' .
      (!empty($instance['description'])
        ? $instance['description']
        : '') . '</div>',
  ); // end $element['value']

  return $element;
} // end function _button_field_widget_html()

/**
 * Builds the renderable array for an image button field widget.
 *
 * @param $id
 *   Id for the field element
 * @param $field
 * @param $instance
 * @param $element
 */
function _button_field_widget_image($id, $field, $instance, $element) {
  $class = array('button_field');
  if (isset($instance['additional_class'])) {
    $class = array_merge($classes, explode(' ', $instance['additional_class']));
  }

  $element['value'] = array(
    '#type' => 'image_button',
    '#id' => $id,
    '#name' => $id,
    '#attributes' => array('class' => $class),
    // Button elements do not obey the #description index, so we need to add
    // our own suffix here.
    '#suffix' => '<div class="description">' .
      (!empty($instance['description'])
        ? $instance['description']
        : '') . '</div>',
    '#src' => $instance['widget']['settings']['image_path'],
    '#value' => (isset($instance['widget']['settings']['text'])
      ? $instance['widget']['settings']['text'] : $instance['label']),
  ); // end $element['value']

  return $element;
} // end function _button_field_widget_image()

/**
 * Builds the id for a button field instance.
 *
 * @param array $field
 *   Field info array.
 * @param string $mode
 *   Mode that the field will be rendered in (view|edit).
 * @param integer $delta
 *   Delta of the instance being rendered.
 * @param string $language
 *   Language of the current field.
 * @return string
 *   Id to be used for the field.
 */
function _button_field_build_id($field, $mode = 'edit', $delta = 0, $language = LANGUAGE_NONE) {
  $parts = array(
    $mode,
    str_replace('_', '-', $field['field_name']),
    $language,
    $delta,
    'value',
  ); // end $parts

  return implode('-', $parts);
} // end function _button_field_build_id()
