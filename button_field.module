<?php

/**
 * @file
 * Defines a field, widget and formatter for the button field type.
 */

/**
 * Implementation of hook_field_info().
 */
function button_field_field_info() {
  return array(
    'button_field' => array(
      'label' => t('Button'),
      'description' =>
        t('Displays a button that, when clicked, fires a rules event'),
      'default_widget' => 'button_field_html',
      'default_formatter' => 'button_field_default',
    ),
  ); // end return
} // end function button_field_field_info()

/**
 * Implementation of hook_field_schema().
 */
function button_field_field_schema($field) {
  return array(
    'columns' => array(
      'value' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'value' => array('value'),
    ),
  ); // end return
} // end function button_field_field_schema()

/**
 * Implementation of hook_field_is_empty().
*/
function button_field_field_is_empty($item, $field) {
  return TRUE;
} // end function button_field_content_is_empty()

/**
 * Implementation of hook_field_formatter_info().
 */
function button_field_field_formatter_info() {
  return array(
    'button_field_default' => array(
      'label' => t('Default'),
      'field types' => array('button_field'),
    ),
  ); // end return
} // end function button_field_field_formatter_info()

/**
 * Implementation of hook_field_formatter_view().
 */
function button_field_field_formatter_view($entity_type, $entity, $field,
  $instance, $langcode, $items, $display) {
  $element = array('value' => array());

  // TODO: Determine the entity id (eid)
  $eid = NULL;

  switch ($instance['widget']['type']) {
    case 'button_field_html':

      $element = _button_field_widget_html($eid, $field, $instance, $element);
      break;

    case 'button_field_image':

      $element = _button_field_widget_image($eid, $field, $instance, $element);
      break;
  } // end switch $instance['widget']['type']

  return $element['value'];
} // end function button_field_field_formatter_view()

/**
 * Implementation of hook_field_widget_info().
 */
function button_field_field_widget_info() {
  return array(
    'button_field_html' => array(
      'label' => 'HTML Button',
      'field types' => array('button_field'),
    ),
    'button_field_image' => array(
      'label' => 'Image Button',
      'field types' => array('button_field'),
    ),
  ); // end return
} // end function button_field_field_widget_info()

/**
 * Implementation of hook_field_settings_form().
 */
function button_field_field_settings_form($field, $instance, $has_data) {
  return array(
    'confirmation' => array(
      '#type' => 'textfield',
      '#title' => t('Confirmation message'),
      '#default_value' => (isset($field['settings']['confirmation'])
        ? $field['settings']['confirmation'] : FALSE),
      '#description' => t('You may enter a confirmation message to be ' .
          'displayed to the user before running any rules. If you do not ' .
          'want the user to see a confirmation message you can leave this ' .
          'setting empty.'),
    ),
  ); // end return
} // end function button_field_field_settings_form()

/**
 * Implementation of hook_field_widget_settings_form().
 */
function button_field_field_widget_settings_form($field, $instance) {
  $form = array(
    'additional_classes' => array(
      '#type' => 'textfield',
      '#title' => t('Additional classes'),
      '#default_value' => (isset($instance['settings']['additional_classes'])
        ? $instance['settings']['additional_classes'] : NULL),
      '#description' => t('Optionally, specify any classes to be applied to ' .
        'the element. All button field elements will always have the ' .
        '"button_field" class. Seperate multiple classes with a space.')
    ),
    'edit_hidden' => array(
      '#type' => 'checkbox',
      '#title' => t('Hide on edit form'),
      '#default_value' => (isset($instance['settings']['edit_hidden'])
        ? $instance['settings']['edit_hidden'] : TRUE),
      '#description' => t('Whether or not this field will be rendered on ' .
        'the node edit and add forms. Note: Nodes do not get assisgned a ' .
        'node id on the add form; therefore, any Rules that require the ' .
        'node to be available on button click will not function properly.'),
    ),
  ); // end $form

  $widget_settings = array();
  $widget = $instance['widget'];
  switch ($instance['widget']['type']) {
    case 'button_field_html':

      $widget_settings['text'] = array(
      	'#type' => 'textfield',
        '#title' => t('Button Text'),
        '#default_value' => (isset($widget['settings']['text']) ? $widget['settings']['text']
          : $instance['label']),
        '#required' => TRUE,
      ); // end $widget_settings['text']
      break;

    case 'button_field_image':

      $widget_settings['image_path'] = array(
        '#type' => 'textfield',
        '#title' => t('Image path'),
        '#default_value' => (isset($widget['settings']['image_path'])
          ? $widget['settings']['image_path'] : NULL),
        '#required' => TRUE,
      ); // end $widget_settings['image_path']

      $widget_settings['alt_text'] = array(
        '#type' => 'textfield',
        '#title' => t('Alt text'),
        '#default_value' => (isset($widget['settings']['alt_text']) ? $widget['settings']['alt_text']
          : $instance['label']),
        '#required' => TRUE,
      ); // end $widget_settings['alt_text']

      $widget_settings['title_text'] = array(
        '#type' => 'textfield',
        '#title' => t('Title text'),
        '#default_value' => (isset($widget['settings']['title_text'])
          ? $widget['settings']['title_text'] : $instance['label']),
        '#required' => FALSE,
      ); // end $widget_settings['title_text']
  } // end switch $instance['widget']['type']

  return array_merge($widget_settings, $form);
} // end function button_field_field_widget_settings_form()

/**
 * Implemenation of hook_form_FORM_ID_alter().
 *
 * Hides the required and cardinality fields and removes the default value from
 * the field_ui_field_edit_form because it does not apply to this field type.
 */
function button_field_form_field_ui_field_edit_form_alter(&$form, &$form_state,
  $form_id) {
  if ($form['#field']['type'] == 'button_field') {
    // Hide the required field and set it to false.
    $form['instance']['required']['#type'] = 'hidden';
    $form['instance']['required']['#value'] = FALSE;

    // Hide the cardinality and set it to one.
    $form['field']['cardinality']['#type'] = 'hidden';
    $form['field']['cardinality']['#value'] = 1;

    // No need for a default value.
    unset($form['instance']['default_value_widget']);
  }
} // end function button_field_form_field_ui_field_edit_form_alter()

/**
 * Implementation of hok_field_widget_form().
 */
function button_field_field_widget_form(&$form, &$form_state, $field, $instance,
  $langcode, $items, $delta, $element) {
  // add the javascript and css files
  drupal_add_js(drupal_get_path('module', 'button_field') .
      '/js/button_field.js');
  drupal_add_css(drupal_get_path('module', 'button_field') .
      '/css/button_field.css');

  // TODO: Determine the entity id (eid)
  $eid = NULL;

  switch ($instance['widget']['type']) {
    case 'button_field_html':

      return ($instance['widget']['settings']['edit_hidden']
        ? array()
        : _button_field_widget_html($eid, $field, $instance, $element));
      break;

    case 'button_field_image':

      return ($instance['widget']['settings']['edit_hidden']
        ? array()
        : _button_field_widget_image($eid, $field, $instance, $element));
      break;
  } // end switch $instance['widget']['type']

  return $element;
} // end function button_field_field_widget_form()

/**
 * Builds the renderable array for an HTML button field widget.
 *
 * @param $eid
 *   Entity id that the field is being rendered on
 * @param $field
 * @param $instance
 * @param $element
 */
function _button_field_widget_html($eid, $field, $instance, $element) {
  $name = $field['field_name'] . '-' . (!empty($eid) ? $eid : 0);

  $classes = array('button_field');
  if (isset($instance['widget']['additional_class'])) {
    $classes = array_merge($classes, explode(' ', $instance['widget']['additional_class']));
  }

  $element['value'] = array(
    '#type' => 'button',
    '#attributes' => array('class' => $classes),
    '#id' => $name,
    '#value' => (isset($instance['widget']['settings']['text'])
      ? $instance['widget']['settings']['text'] : $instance['label']),
    '#prefix' => '<div class="form-item">',
    '#suffix' => '<div class="description">' .
      (!empty($instance['widget']['description'])
        ? $instance['widget']['description']
        : '') . '</div></div>',
  ); // end $element['value']

  return $element;
} // end function _button_field_widget_html()

/**
 * Builds the renderable array for an image button field widget.
 *
 * @param $eid
 *   Entity id that the field is being rendered on
 * @param $field
 * @param $instance
 * @param $element
 */
function _button_field_widget_image($eid, $field, $instance, $element) {
  $name = $field['field_name'] . '-' . (!empty($eid) ? $eid : 0);

  $classes = array('button_field');
  if (isset($instance['widget']['additional_class'])) {
    $classes = array_merge($classes, explode(' ', $instance['widget']['additional_class']));
  }

  $element['value'] = array(
    '#type' => 'item',
    '#value' => '<img src="' . $instance['widget']['settings']['image_path'] . '" ' .
      'alt="' . $instance['widget']['settings']['alt_text'] . '" ' .
      'title="' . $instance['widget']['settings']['title_text'] . '" ' .
      'id="' . $name . '" name="' . $name . '" class="' . implode(' ', $classes) . '" />' .
      "\n",
    '#prefix' => '<div class="form-item">',
    '#suffix' => '<div class="description">' .
      (!empty($instance['widget']['description'])
        ? $instance['widget']['description']
        : '') . '</div></div>',
  ); // end $element['value']

  return $element;
} // end function _button_field_widget_image()
